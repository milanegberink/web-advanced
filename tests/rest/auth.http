### POST Create user with invalid password (too short)
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json
Accept: application/json

{
  "username": "user",
  "password": "pass"
}

> {%
    client.test(
        "Request executed successfully",
        function() {
            client.assert(response.status === 400, "Response status is not 400");
        }
    );
%}

### POST Create user with an empty username
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json
Accept: application/json

{
  "password": "password"
}

> {%
    client.test(
        "Request executed successfully",
        function() {
            client.assert(response.status === 400, "Response status is not 400");
        }
    );
%}

### POST Create user with spaces in username
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json
Accept: application/json

{
  "username": "mijn koele username",
  "password": "pass"
}

> {%
    client.test(
        "Request executed successfully",
        function() {
            client.assert(response.status === 400, "Response status is not 400");
        }
    );
%}


### POST Login with invalid password and username
POST {{protocol}}{{host}}:{{port}}/auth/login
Content-Type: application/json
Accept: application/json

{
  "username": "invalid  username",
  "password": "pass"
}

> {%
    client.test(
        "Request executed successfully",
        function() {
            client.assert(response.status === 404, "Response status is not 404");
        }
    );
%}

### POST Login with valid username and password
POST {{protocol}}{{host}}:{{port}}/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "password"
}

> {%
    client.test(
        "Request executed successfully",
        function() {
            client.assert(response.status === 200, "Response status is not 200");
        }
    );
%}


### POST With already existing user
POST {{protocol}}{{host}}:{{port}}/auth/register
Content-Type: application/json
Accept: application/json

{
  "username": "admin",
  "password": "password"
}

> {%
    client.test(
        "Request executed successfully",
        function() {
            client.assert(response.status === 400, "Response status is not 400");
        }
    );
%}
