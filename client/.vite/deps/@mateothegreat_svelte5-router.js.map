{
  "version": 3,
  "sources": ["../../node_modules/@mateothegreat/svelte5-router/actions/route.js", "../../node_modules/@mateothegreat/svelte5-router/methods.js", "../../node_modules/@mateothegreat/svelte5-router/index.js", "../../node_modules/@mateothegreat/svelte5-router/instance.svelte.js", "../../node_modules/@mateothegreat/svelte5-router/query.svelte.js"],
  "sourcesContent": ["/**\n * Svelte action to handle routing.\n * Add `use:route` to an anchor element to handle routing.\n * @param node - The anchor element to handle.\n * @returns - The destroy function.\n */\nexport function route(node) {\n    const handleClick = (event) => {\n        event.preventDefault();\n        window.history.pushState({}, \"\", node.href);\n        const navigationEvent = new CustomEvent(\"navigation\", {\n            detail: { href: node.href },\n        });\n        window.dispatchEvent(navigationEvent);\n    };\n    node.addEventListener(\"click\", handleClick);\n    return {\n        destroy() {\n            node.removeEventListener(\"click\", handleClick);\n        },\n    };\n}\n", "export const goto = (path, queryParams) => {\n    const url = new URL(path, window.location.origin);\n    if (queryParams) {\n        Object.entries(queryParams).forEach(([key, value]) => {\n            url.searchParams.set(key, value);\n        });\n    }\n    window.history.pushState({}, \"\", url.toString());\n};\nexport const query = (key) => {\n    return new URLSearchParams(window.location.search).get(key);\n};\n", "export { route } from \"./actions/route\";\nexport { goto, query } from \"./methods\";\nexport * from \"./router.svelte\";\nexport { Instance as default, QueryString, Router };\nimport { Instance } from \"./instance.svelte\";\nimport { QueryString } from \"./query.svelte\";\nimport Router from \"./router.svelte\";\n", "/**\n * A router instance that each <Router/> component creates.\n */\nexport class Instance {\n    id = crypto.randomUUID();\n    basePath;\n    routes = [];\n    #pre;\n    #post;\n    current = $state();\n    navigating = $state(false);\n    /**\n     * Creates a new router instance.\n     * @param {string} basePath (optional) The base path to navigate to.\n     * @param {Route[]} routes The routes to navigate to.\n     * @param {PreHooks} pre (optional) The pre hooks to run before navigating to a route.\n     * @param {PostHooks} post (optional) The post hooks to run after navigating to a route.\n     * @param {string} currentPath (optional) The current path to automaticallynavigate to.\n     */\n    constructor(basePath, routes, pre, post, currentPath) {\n        this.basePath = basePath;\n        this.routes = routes;\n        if (currentPath) {\n            this.current = this.get(currentPath);\n        }\n        this.#pre = pre;\n        this.#post = post;\n    }\n    /**\n     * Get the route for a given path.\n     * @returns { Route } The route for the given path.\n     */\n    get(path) {\n        let route;\n        let pathToMatch = path;\n        if (this.basePath && this.basePath !== \"/\") {\n            pathToMatch = path.replace(this.basePath, \"\");\n        }\n        // If the path is the root path, return the root route:\n        if (pathToMatch === \"/\") {\n            route = this.routes.find((route) => route.path === \"/\");\n        }\n        // Split the path into the first segment and the rest:\n        const [first, ...rest] = pathToMatch.replace(/^\\//, \"\").split(\"/\");\n        route = this.routes.find((route) => route.path === first);\n        // If the route is not found, try to find a route that matches at least part of the path:\n        if (!route) {\n            for (const r of this.routes) {\n                const regexp = new RegExp(r.path);\n                const match = regexp.exec(path);\n                if (match) {\n                    route = { ...r, params: match.groups || match.slice(1) };\n                    break;\n                }\n            }\n        }\n        return route;\n    }\n    /**\n     * Navigates to a given route, running  the pre and post hooks.\n     * @param {Route} route The route to navigate to.\n     * @returns {Promise<void>}\n     */\n    async run(route) {\n        this.navigating = true;\n        // First, run the global pre hooks.\n        if (this.#pre) {\n            if (Array.isArray(this.#pre)) {\n                for (const pre of this.#pre) {\n                    route = await pre(route);\n                }\n            }\n            else {\n                route = await this.#pre(route);\n            }\n        }\n        // Then, run the route specific pre hooks.\n        if (route && route.pre) {\n            if (Array.isArray(route.pre)) {\n                for (const pre of route.pre) {\n                    const r = await pre(route);\n                    if (r) {\n                        route = r;\n                    }\n                }\n            }\n            else {\n                const r = await route.pre(route);\n                if (r) {\n                    route = r;\n                }\n            }\n        }\n        // Then, set the current route and given `current` is\n        // a reactive $state() variable, it will trigger a render:\n        this.current = route;\n        // Run the route specific post hooks:\n        if (route && route.post) {\n            if (Array.isArray(route.post)) {\n                for (const post of route.post) {\n                    await post(route);\n                }\n            }\n            else {\n                await route.post(route);\n            }\n        }\n        // Finally, run the global post hooks:\n        if (this.#post) {\n            if (Array.isArray(this.#post)) {\n                for (const post of this.#post) {\n                    await post(route);\n                }\n            }\n            else {\n                await this.#post(route);\n            }\n        }\n        this.navigating = false;\n    }\n}\n/**\n * Sets up a new history watcher for a router instance.\n * @param {Instance} instance The router instance to setup the history watcher for.\n */\nexport const setupHistoryWatcher = (instance) => {\n    const { pushState, replaceState } = window.history;\n    if (!window.history._listenersAdded) {\n        // Override pushState to dispatch a custom event\n        window.history.pushState = function (...args) {\n            pushState.apply(window.history, args);\n            window.dispatchEvent(new Event(\"pushState\"));\n        };\n        // Override replaceState to dispatch a custom event\n        window.history.replaceState = function (...args) {\n            replaceState.apply(window.history, args);\n            window.dispatchEvent(new Event(\"replaceState\"));\n        };\n        // Listen for custom pushState and replaceState events\n        window.addEventListener(\"pushState\", () => {\n            instance.run(instance.get(location.pathname));\n        });\n        window.addEventListener(\"replaceState\", () => {\n            instance.run(instance.get(location.pathname));\n        });\n        // Listen for popstate event to detect forward and backward navigation\n        window.addEventListener(\"popstate\", () => {\n            instance.run(instance.get(location.pathname));\n        });\n        window.history._listenersAdded = true;\n    }\n};\n", "import { goto } from \"./methods\";\nexport class QueryString {\n    params = $state();\n    constructor() {\n        this.params = Object.fromEntries(new URLSearchParams(window.location.search));\n    }\n    get(key, defaultValue) {\n        return this.params[key] || defaultValue;\n    }\n    set(key, value) {\n        this.params[key] = value;\n    }\n    delete(key) {\n        delete this.params[key];\n    }\n    clear() {\n        this.params = {};\n    }\n    toString() {\n        return Object.entries(this.params)\n            .map(([key, value]) => `${key}=${value}`)\n            .join(\"&\");\n    }\n    goto(path) {\n        goto(path, this.params);\n    }\n}\n"],
  "mappings": "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",
  "names": ["route"]
}
